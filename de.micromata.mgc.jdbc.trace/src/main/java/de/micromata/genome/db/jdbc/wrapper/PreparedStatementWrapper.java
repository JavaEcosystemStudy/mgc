//
// Copyright (C) 2010-2016 Micromata GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package de.micromata.genome.db.jdbc.wrapper;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;

/**
 * The Class PreparedStatementWrapper.
 *
 * @author Roger Rene Kommer (r.kommer.extern@micromata.de)
 */
public class PreparedStatementWrapper extends StatementWrapper implements PreparedStatement
{

  /**
   * The nested prepared statement.
   */
  private PreparedStatement nestedPreparedStatement;

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void addBatch(String sql) throws SQLException
  {
    nestedPreparedStatement.addBatch(sql);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void cancel() throws SQLException
  {
    nestedPreparedStatement.cancel();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void clearBatch() throws SQLException
  {
    nestedPreparedStatement.clearBatch();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void clearWarnings() throws SQLException
  {
    nestedPreparedStatement.clearWarnings();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void close() throws SQLException
  {
    nestedPreparedStatement.close();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException
  {
    return nestedPreparedStatement.execute(sql, autoGeneratedKeys);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SQLException
  {
    return nestedPreparedStatement.execute(sql, columnIndexes);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public boolean execute(String sql, String[] columnNames) throws SQLException
  {
    return nestedPreparedStatement.execute(sql, columnNames);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public boolean execute(String sql) throws SQLException
  {
    return nestedPreparedStatement.execute(sql);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public int[] executeBatch() throws SQLException
  {
    return nestedPreparedStatement.executeBatch();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public ResultSet executeQuery(String sql) throws SQLException
  {
    return nestedPreparedStatement.executeQuery(sql);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException
  {
    return nestedPreparedStatement.executeUpdate(sql, autoGeneratedKeys);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException
  {
    return nestedPreparedStatement.executeUpdate(sql, columnIndexes);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public int executeUpdate(String sql, String[] columnNames) throws SQLException
  {
    return nestedPreparedStatement.executeUpdate(sql, columnNames);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public int executeUpdate(String sql) throws SQLException
  {
    return nestedPreparedStatement.executeUpdate(sql);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public Connection getConnection() throws SQLException
  {
    return nestedPreparedStatement.getConnection();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public int getFetchDirection() throws SQLException
  {
    return nestedPreparedStatement.getFetchDirection();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public int getFetchSize() throws SQLException
  {
    return nestedPreparedStatement.getFetchSize();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public ResultSet getGeneratedKeys() throws SQLException
  {
    return nestedPreparedStatement.getGeneratedKeys();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public int getMaxFieldSize() throws SQLException
  {
    return nestedPreparedStatement.getMaxFieldSize();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public int getMaxRows() throws SQLException
  {
    return nestedPreparedStatement.getMaxRows();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public boolean getMoreResults() throws SQLException
  {
    return nestedPreparedStatement.getMoreResults();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public boolean getMoreResults(int current) throws SQLException
  {
    return nestedPreparedStatement.getMoreResults(current);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public int getQueryTimeout() throws SQLException
  {
    return nestedPreparedStatement.getQueryTimeout();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public ResultSet getResultSet() throws SQLException
  {
    return nestedPreparedStatement.getResultSet();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public int getResultSetConcurrency() throws SQLException
  {
    return nestedPreparedStatement.getResultSetConcurrency();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public int getResultSetHoldability() throws SQLException
  {
    return nestedPreparedStatement.getResultSetHoldability();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public int getResultSetType() throws SQLException
  {
    return nestedPreparedStatement.getResultSetType();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public int getUpdateCount() throws SQLException
  {
    return nestedPreparedStatement.getUpdateCount();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public SQLWarning getWarnings() throws SQLException
  {
    return nestedPreparedStatement.getWarnings();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public boolean isClosed() throws SQLException
  {
    return nestedPreparedStatement.isClosed();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public boolean isPoolable() throws SQLException
  {
    return nestedPreparedStatement.isPoolable();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException
  {
    return nestedPreparedStatement.isWrapperFor(iface);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException
  {
    nestedPreparedStatement.setAsciiStream(parameterIndex, x, length);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException
  {
    nestedPreparedStatement.setAsciiStream(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException
  {
    nestedPreparedStatement.setBinaryStream(parameterIndex, x, length);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException
  {
    nestedPreparedStatement.setBinaryStream(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException
  {
    nestedPreparedStatement.setBlob(parameterIndex, inputStream, length);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException
  {
    nestedPreparedStatement.setBlob(parameterIndex, inputStream);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException
  {
    nestedPreparedStatement.setCharacterStream(parameterIndex, reader, length);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException
  {
    nestedPreparedStatement.setCharacterStream(parameterIndex, reader);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setClob(int parameterIndex, Reader reader, long length) throws SQLException
  {
    nestedPreparedStatement.setClob(parameterIndex, reader, length);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setClob(int parameterIndex, Reader reader) throws SQLException
  {
    nestedPreparedStatement.setClob(parameterIndex, reader);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setCursorName(String name) throws SQLException
  {
    nestedPreparedStatement.setCursorName(name);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setEscapeProcessing(boolean enable) throws SQLException
  {
    nestedPreparedStatement.setEscapeProcessing(enable);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setFetchDirection(int direction) throws SQLException
  {
    nestedPreparedStatement.setFetchDirection(direction);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setFetchSize(int rows) throws SQLException
  {
    nestedPreparedStatement.setFetchSize(rows);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setMaxFieldSize(int max) throws SQLException
  {
    nestedPreparedStatement.setMaxFieldSize(max);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setMaxRows(int max) throws SQLException
  {
    nestedPreparedStatement.setMaxRows(max);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException
  {
    nestedPreparedStatement.setNCharacterStream(parameterIndex, value, length);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException
  {
    nestedPreparedStatement.setNCharacterStream(parameterIndex, value);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setNClob(int parameterIndex, NClob value) throws SQLException
  {
    nestedPreparedStatement.setNClob(parameterIndex, value);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException
  {
    nestedPreparedStatement.setNClob(parameterIndex, reader, length);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setNClob(int parameterIndex, Reader reader) throws SQLException
  {
    nestedPreparedStatement.setNClob(parameterIndex, reader);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setNString(int parameterIndex, String value) throws SQLException
  {
    nestedPreparedStatement.setNString(parameterIndex, value);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setPoolable(boolean poolable) throws SQLException
  {
    nestedPreparedStatement.setPoolable(poolable);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setQueryTimeout(int seconds) throws SQLException
  {
    nestedPreparedStatement.setQueryTimeout(seconds);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setRowId(int parameterIndex, RowId x) throws SQLException
  {
    nestedPreparedStatement.setRowId(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException
  {
    nestedPreparedStatement.setSQLXML(parameterIndex, xmlObject);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public <T> T unwrap(Class<T> iface) throws SQLException
  {
    return nestedPreparedStatement.unwrap(iface);
  }

  /**
   * Instantiates a new prepared statement wrapper.
   */
  public PreparedStatementWrapper()
  {

  }

  /**
   * Instantiates a new prepared statement wrapper.
   *
   * @param nestedPreparedStatement the nested prepared statement
   */
  public PreparedStatementWrapper(PreparedStatement nestedPreparedStatement)
  {
    super(nestedPreparedStatement);
    this.nestedPreparedStatement = nestedPreparedStatement;
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void addBatch() throws SQLException
  {
    nestedPreparedStatement.addBatch();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void clearParameters() throws SQLException
  {
    nestedPreparedStatement.clearParameters();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public boolean execute() throws SQLException
  {
    return nestedPreparedStatement.execute();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public ResultSet executeQuery() throws SQLException
  {
    return nestedPreparedStatement.executeQuery();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public int executeUpdate() throws SQLException
  {
    return nestedPreparedStatement.executeUpdate();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public ResultSetMetaData getMetaData() throws SQLException
  {
    return nestedPreparedStatement.getMetaData();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public ParameterMetaData getParameterMetaData() throws SQLException
  {
    return nestedPreparedStatement.getParameterMetaData();
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setArray(int i, Array x) throws SQLException
  {
    nestedPreparedStatement.setArray(i, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException
  {
    nestedPreparedStatement.setAsciiStream(parameterIndex, x, length);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException
  {
    nestedPreparedStatement.setBigDecimal(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException
  {
    nestedPreparedStatement.setBinaryStream(parameterIndex, x, length);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setBlob(int i, Blob x) throws SQLException
  {
    nestedPreparedStatement.setBlob(i, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setBoolean(int parameterIndex, boolean x) throws SQLException
  {
    nestedPreparedStatement.setBoolean(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setByte(int parameterIndex, byte x) throws SQLException
  {
    nestedPreparedStatement.setByte(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setBytes(int parameterIndex, byte[] x) throws SQLException
  {
    nestedPreparedStatement.setBytes(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException
  {
    nestedPreparedStatement.setCharacterStream(parameterIndex, reader, length);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setClob(int i, Clob x) throws SQLException
  {
    nestedPreparedStatement.setClob(i, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setDate(int parameterIndex, Date x) throws SQLException
  {
    nestedPreparedStatement.setDate(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException
  {
    nestedPreparedStatement.setDate(parameterIndex, x, cal);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setDouble(int parameterIndex, double x) throws SQLException
  {
    nestedPreparedStatement.setDouble(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setFloat(int parameterIndex, float x) throws SQLException
  {
    nestedPreparedStatement.setFloat(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setInt(int parameterIndex, int x) throws SQLException
  {
    nestedPreparedStatement.setInt(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setLong(int parameterIndex, long x) throws SQLException
  {
    nestedPreparedStatement.setLong(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setNull(int parameterIndex, int sqlType) throws SQLException
  {
    nestedPreparedStatement.setNull(parameterIndex, sqlType);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException
  {
    nestedPreparedStatement.setNull(paramIndex, sqlType, typeName);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setObject(int parameterIndex, Object x) throws SQLException
  {
    nestedPreparedStatement.setObject(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException
  {
    nestedPreparedStatement.setObject(parameterIndex, x, targetSqlType);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException
  {
    nestedPreparedStatement.setObject(parameterIndex, x, targetSqlType, scale);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setRef(int i, Ref x) throws SQLException
  {
    nestedPreparedStatement.setRef(i, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setShort(int parameterIndex, short x) throws SQLException
  {
    nestedPreparedStatement.setShort(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setString(int parameterIndex, String x) throws SQLException
  {
    nestedPreparedStatement.setString(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setTime(int parameterIndex, Time x) throws SQLException
  {
    nestedPreparedStatement.setTime(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException
  {
    nestedPreparedStatement.setTime(parameterIndex, x, cal);

  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException
  {
    nestedPreparedStatement.setTimestamp(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException
  {
    nestedPreparedStatement.setTimestamp(parameterIndex, x, cal);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  public void setURL(int parameterIndex, URL x) throws SQLException
  {
    nestedPreparedStatement.setURL(parameterIndex, x);
  }

  /**
   * {@inheritDoc}
   *
   */

  @Override
  @Deprecated
  public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException
  {
    nestedPreparedStatement.setUnicodeStream(parameterIndex, x, length);
  }

  /**
   * Gets the nested prepared statement.
   *
   * @return the nested prepared statement
   */
  public PreparedStatement getNestedPreparedStatement()
  {
    return nestedPreparedStatement;
  }

  /**
   * Sets the nested prepared statement.
   *
   * @param nestedPreparedStatement the new nested prepared statement
   */
  public void setNestedPreparedStatement(PreparedStatement nestedPreparedStatement)
  {
    this.nestedPreparedStatement = nestedPreparedStatement;
  }

}
