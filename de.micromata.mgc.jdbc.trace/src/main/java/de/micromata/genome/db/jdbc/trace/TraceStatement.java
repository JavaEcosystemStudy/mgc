//
// Copyright (C) 2010-2016 Micromata GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package de.micromata.genome.db.jdbc.trace;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import de.micromata.genome.db.jdbc.wrapper.StatementWrapper;
import de.micromata.genome.util.runtime.CallableX;

/**
 * The Class TraceStatement.
 *
 * @author roger
 */
public class TraceStatement extends StatementWrapper implements SqlTraced
{

  /**
   * The trace connection.
   */
  private TraceConnection traceConnection;

  /**
   * The sql arguments.
   */
  private TraceSqlArguments sqlArguments = new TraceSqlArguments();

  /**
   * The recursion guard.
   */
  protected static ThreadLocal<Boolean> recursionGuard = new ThreadLocal<Boolean>()
  {

    @Override
    protected Boolean initialValue()
    {
      return Boolean.FALSE;
    }
  };

  /**
   * Instantiates a new trace statement.
   */
  public TraceStatement()
  {
    super();
  }

  @Override
  public TraceSqlArguments getSqlArguments()
  {

    return sqlArguments;
  }

  public TraceConfig getTraceConfig()
  {
    return traceConnection.getDataSourceWrapper().getTraceConfig();
  }

  public boolean isInRecursion()
  {

    return false;
  }

  /**
   * Lock recursion.
   */
  public void lockRecursion()
  {
    // TODO Auto-generated method stub

  }

  /**
   * Release recursion.
   */
  public void releaseRecursion()
  {
    // TODO Auto-generated method stub

  }

  /**
   * Instantiates a new trace statement.
   *
   * @param traceConnection the trace connection
   * @param nestedStatement the nested statement
   */
  public TraceStatement(TraceConnection traceConnection, Statement nestedStatement)
  {
    super(nestedStatement);
    this.traceConnection = traceConnection;
  }

  /**
   * Execute wrapped.
   *
   * @param <T> the generic type
   * @param sql the sql
   * @param callable the callable
   * @return the t
   * @throws SQLException the SQL exception
   */
  protected <T> T executeWrapped(String sql, CallableX<T, SQLException> callable) throws SQLException
  {
    return getTraceConfig().getSqlTracer().executeWrapped(this, sql, callable);
  }

  @Override
  public TraceConnection getTraceConnection()
  {
    return traceConnection;
  }

  public void setTraceConnection(TraceConnection traceConnection)
  {
    this.traceConnection = traceConnection;
  }

  @Override
  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException
  {
    // TODO Auto-generated method stub
    return super.execute(sql, autoGeneratedKeys);
  }

  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SQLException
  {
    // TODO Auto-generated method stub
    return super.execute(sql, columnIndexes);
  }

  @Override
  public boolean execute(String sql, String[] columnNames) throws SQLException
  {
    // TODO Auto-generated method stub
    return super.execute(sql, columnNames);
  }

  @Override
  public boolean execute(String sql) throws SQLException
  {
    // TODO Auto-generated method stub
    return super.execute(sql);
  }

  @Override
  public int[] executeBatch() throws SQLException
  {
    // TODO Auto-generated method stub
    return super.executeBatch();
  }

  @Override
  public ResultSet executeQuery(String sql) throws SQLException
  {
    // TODO Auto-generated method stub
    return super.executeQuery(sql);
  }

  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException
  {
    // TODO Auto-generated method stub
    return super.executeUpdate(sql, autoGeneratedKeys);
  }

  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException
  {
    // TODO Auto-generated method stub
    return super.executeUpdate(sql, columnIndexes);
  }

  @Override
  public int executeUpdate(String sql, String[] columnNames) throws SQLException
  {
    // TODO Auto-generated method stub
    return super.executeUpdate(sql, columnNames);
  }

  @Override
  public int executeUpdate(String sql) throws SQLException
  {
    // TODO Auto-generated method stub
    return super.executeUpdate(sql);
  }

}
