//
// Copyright (C) 2010-2016 Micromata GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package de.micromata.genome.util.runtime.config;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Properties;

import org.junit.Assert;
import org.junit.Test;

import de.micromata.genome.util.runtime.RuntimeIOException;

/**
 * 
 * @author Roger Rene Kommer (r.kommer.extern@micromata.de)
 *
 */
public class LocalSettingsWriterTest
{
  @Test
  public void testCheckDups()
  {
    LocalSettingsWriter writer = new LocalSettingsWriter();
    LocalSettingsWriter sw = writer.newSection("First section");
    sw.put("AKEY", "first");
    sw = writer.newSection("Second section");
    try {
      sw.put("AKEY", "second");
      Assert.fail("Missing IllegalArgumentException");
    } catch (IllegalArgumentException ex) {
      // expected
    }

  }

  @Test
  public void testWriteProps()
  {
    LocalSettingsWriter writer = new LocalSettingsWriter();
    writer.setComment("Generated by Test\n\nSecond Header Line");
    LocalSettingsWriter sw = writer.newSection("First section");
    sw.put("a.b.a", "A value", "First key");
    sw.put("a.b.b", "B value", "Second key");
    sw.put("a.b.c", "C value");
    sw = writer.newSection("Second section");
    sw.put("b.b.a", "A value", "First key");
    sw.put("b.b.b", "B value", "Second key");
    checkStoreLoadAndCompare(writer);
  }

  @Test
  public void testWriteLean()
  {
    LocalSettingsWriter sw = new LocalSettingsWriter();
    sw.put("abc", "x");
    sw.put("abd", "y");
    sw.put("abe", "z");
    checkStoreLoadAndCompare(sw);
  }

  @Test
  public void testWriteEncodKey()
  {
    LocalSettingsWriter sw = new LocalSettingsWriter();
    sw.put("a=key", "x");
    sw.put("a\nkey", "y");
    sw.put("a be", "z");
    checkStoreLoadAndCompare(sw);

  }

  @Test
  public void testWriteEncodValue()
  {
    LocalSettingsWriter sw = new LocalSettingsWriter();
    sw.put("a", "a b\nb\t#!=");
    String umlval = "\u00c4\u00d6\u00df";
    sw.put("b", umlval);
    sw.put("c", "# hashtag");
    sw.put("d", " # hashtag");
    sw.put("e", "val with spaces");
    checkStoreLoadAndCompare(sw);

  }

  private void checkStoreLoadAndCompare(LocalSettingsWriter writer)
  {
    File propFile = new File("target/testsampleprops.properties");

    writer.store(propFile);

    Properties props = new Properties();
    try {
      props.load(new FileInputStream(propFile));
    } catch (IOException ex) {
      throw new RuntimeIOException(ex);
    }
    Assert.assertEquals(writer.allEntries.size(), props.size());
    for (Map.Entry<String, String> me : writer.allEntries.entrySet()) {
      String pval = props.getProperty(me.getKey());
      Assert.assertEquals("Value for key not equal: " + me.getKey(), me.getValue(), pval);
    }
  }
}
